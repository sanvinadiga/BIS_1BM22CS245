import numpy as np
import random

# 1. Define the New Fitness Function
def fitness_function(x):
    # Extract x1 and x2 from the input vector
    x1, x2 = x[0], x[1]

    # The system of equations
    f1 = x1 + 2 * -x2 + 3
    f2 = 2 * x1 + x2 - 8

    # Objective function: sum of squared errors
    z = f1**2 + f2**2
    return z

# 2. Initialize Parameters (unchanged)
class Particle:
    def __init__(self, dim, bounds):
        # Random initial position and velocity within bounds
        self.position = np.random.uniform(bounds[0], bounds[1], dim)
        self.velocity = np.random.uniform(-1, 1, dim)
        self.best_position = np.copy(self.position)
        self.best_value = float('inf')

    def update_velocity(self, global_best_position, w, c1, c2):
        # Update velocity based on the inertia, cognitive and social components
        inertia = w * self.velocity
        cognitive = c1 * np.random.random() * (self.best_position - self.position)
        social = c2 * np.random.random() * (global_best_position - self.position)
        self.velocity = inertia + cognitive + social

    def update_position(self, bounds):
        # Update position based on the velocity
        self.position += self.velocity
        # Ensure the position stays within bounds
        self.position = np.clip(self.position, bounds[0], bounds[1])

    def evaluate(self, func):
        # Evaluate fitness (value of the function)
        fitness = func(self.position)
        # Update personal best if the current fitness is better
        if fitness < self.best_value:
            self.best_position = np.copy(self.position)
            self.best_value = fitness

# 3. Initialize Particles and PSO Parameters
def pso(func, dim, bounds, num_particles=30, max_iter=100, w=0.5, c1=1.5, c2=1.5):
    # Initialize particles
    particles = [Particle(dim, bounds) for _ in range(num_particles)]

    # Initialize global best
    global_best_position = None
    global_best_value = float('inf')

    # 4. Iterate and update particles
    for iteration in range(max_iter):
        for particle in particles:
            # Evaluate fitness for each particle
            particle.evaluate(func)
            # Update the global best if needed
            if particle.best_value < global_best_value:
                global_best_position = np.copy(particle.best_position)
                global_best_value = particle.best_value

        # 5. Update velocities and positions for each particle
        for particle in particles:
            particle.update_velocity(global_best_position, w, c1, c2)
            particle.update_position(bounds)

        # Optionally print progress
        print(f"Iteration {iteration+1}/{max_iter}, Global Best Value: {global_best_value}")

    # 7. Output the Best Solution
    return global_best_position, global_best_value

# Main Execution: Define the problem and run PSO
if __name__ == "__main__":
    # Problem Parameters
    dim = 2  # Number of dimensions (variables), we are minimizing the function with x1 and x2
    bounds = (-10, 10)  # Bounds for the search space (for both x1 and x2)

    # Run PSO to optimize the new fitness function
    best_position, best_value = pso(fitness_function, dim, bounds)

    print(f"Best Position: {best_position}")
    print(f"Best Value: {best_value}")



OUTPUT:
Best Position: [2.6 2.8]
Best Value: 4.721132324571533e-23
